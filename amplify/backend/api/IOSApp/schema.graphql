type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  userAt: String! @index (name: "userByUserAt", queryField: "userByUserAt")
  userEmail: AWSEmail
  username: String
  followingUsers: Int!
  isContentCreator: Boolean!
  followingUsersAts: [String]
  followedUsers: Int!
  followedUsersAts: [String]
  bioDescription: String
  profileImageKey: String
  bannerImageKey: String
  claimedNFTs: [Post]! @hasMany(indexName: "claimed",fields: ["id"] )
  posts: [Post] @hasMany(indexName: "owner",fields: ["id"] )
}



type Post @model @auth(rules: [{ allow: public }]) {
  id: ID!
  postOwner: User! @belongsTo(fields: ["postOwnerId"])
  postContent: String!
  postStatus: PostStatus
  graphicalResourceKey: String
  whoClaimed: User @belongsTo(fields: ["whoClaimedId"])
  geoGraphicalPostPosition: GeoGraphicalData!
  timePosted: AWSDateTime
  timeToPublish: AWSDateTime
  ethPrice: Float
  postOwnerId: ID! @index(name: "owner")
  whoClaimedId: ID @index(name: "claimed")
}


enum PostStatus {
  PAST
  LIVE
  UPCOMING
}

type GeoGraphicalData {
  logitudeDDegrees: Float!
  latitudeDDegrees: Float!
}